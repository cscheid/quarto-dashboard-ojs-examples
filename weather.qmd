---
title: Click on map to obtain NWS weekly forecast
echo: false
format:
  dashboard:
    orientation: columns
---

```{ojs}
//| output: false
us = FileAttachment("states-10m.json").json()
nation = topojson.feature(us, us.objects.nation)
proj = d3.geoAlbersUsa().fitSize([cards.map.width, cards.map.height], nation);
statemesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b)
centroid = Generators.observe(next => {
    next([-108.4569010952928, 36.85687898029089]);
    plot.onclick = function(evt) {
        const width = Number(plot.getAttribute("width"));
        const height = Number(plot.getAttribute("height"));
        next(proj.invert([evt.offsetX, evt.offsetY]));
    }});
forecast = {
    const resp = await fetch(`https://api.weather.gov/points/${centroid[1]},${centroid[0]}`);
    if (resp.status !== 200) {
        return {
            place: "Unknown",
            periods: []
        }
    }
    const json = await resp.json();
    
    if (json.properties.forecast) {
        const forecastResp = await fetch(json.properties.forecast);
        const tbl = await forecastResp.json();
        const place = json.properties.relativeLocation.properties;
        if (tbl.properties === undefined) {
            return {
                place: `${place.city}, ${place.state}`,
                periods: [],
                response1: json,
                response2: tbl,
                response2Status: forecastResp.status
            }
        }
        return {
            place: `${place.city}, ${place.state}`,
            periods: tbl.properties.periods,
            response1: json,
            response2: tbl,
            response2Status: forecastResp.status
        };
    }
    return {
        place: "",
        periods: [],
    }
}
```

## Column {width=60%}

```{ojs}
//| label: map
plot = {
    const result = Plot.plot({
        projection: proj,
        length: { range: [0, 200] },
        marks: [
            Plot.geo(nation, { fill: "#e0e0e0" }),
            Plot.geo(statemesh, { stroke: "white" }),
        ],
    });
    return result;
}
```

## Column {width=40%}

```{ojs}
//| title: "Location: ${forecast.place}"
//| output: asis
{
    const div = html`<div></div>`;
    if (forecast.response2Status !== 200) {
        div.appendChild(html`<div>NWS did not provide forecast</div>`);
        return div;
    }
    const tbl = html`<table><thead><tr><th>when</th><th>temperature</th><th>wind</th></table>`
    div.appendChild(tbl);

    const minTemp = Math.min(...forecast.periods.map(x => x.temperature));
    const maxTemp = Math.max(...forecast.periods.map(x => x.temperature));

    for (const period of forecast.periods) {
        const row = html`<tr></tr>`;
        row.appendChild(html`<td>${period.name}</td>`);
        row.appendChild(html`<td>${period.temperature}</td>`);
        row.appendChild(html`<td>${period.windDirection} at ${period.windSpeed}</td>`);
        tbl.appendChild(row);
    }
    return div;
}
```
